{"ast":null,"code":"import { switchMap } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"../Services/Link.service\";\nexport class ShortenUrlInterceptorService {\n  constructor(linkService) {\n    this.linkService = linkService;\n  }\n  intercept(req, next) {\n    // Check if the request is containing a short code in the URL\n    const shortCode = req.url.split('/')[3];\n    if (shortCode) {\n      return this.linkService.GetByCode(shortCode).pipe(switchMap(result => {\n        var fullRequest = req.clone({\n          url: result.originalUrl\n        });\n        return next.handle(fullRequest);\n      }));\n    } else {\n      return next.handle(req);\n    }\n  }\n}\nShortenUrlInterceptorService.ɵfac = function ShortenUrlInterceptorService_Factory(t) {\n  return new (t || ShortenUrlInterceptorService)(i0.ɵɵinject(i1.LinkService));\n};\nShortenUrlInterceptorService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: ShortenUrlInterceptorService,\n  factory: ShortenUrlInterceptorService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":"AAGA,SAAqBA,SAAS,QAAQ,MAAM;;;AAM5C,OAAM,MAAOC,4BAA4B;EACvCC,YAAoBC,WAAwB;IAAxB,gBAAW,GAAXA,WAAW;EAAgB;EAE/CC,SAAS,CACPC,GAAqB,EACrBC,IAAiB;IAEjB;IACA,MAAMC,SAAS,GAAGF,GAAG,CAACG,GAAG,CAACC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;IACvC,IAAIF,SAAS,EAAE;MACb,OAAO,IAAI,CAACJ,WAAW,CAACO,SAAS,CAACH,SAAS,CAAC,CAACI,IAAI,CAC/CX,SAAS,CAAEY,MAAgC,IAAI;QAC7C,IAAIC,WAAW,GAAGR,GAAG,CAACS,KAAK,CAAC;UAAEN,GAAG,EAAEI,MAAM,CAACG;QAAW,CAAE,CAAC;QACxD,OAAOT,IAAI,CAACU,MAAM,CAACH,WAAW,CAAC;MACjC,CAAC,CAAC,CACH;KACF,MAAM;MACL,OAAOP,IAAI,CAACU,MAAM,CAACX,GAAG,CAAC;;EAE3B;;AAnBWJ,4BAA4B;mBAA5BA,4BAA4B;AAAA;AAA5BA,4BAA4B;SAA5BA,4BAA4B;EAAAgB,SAA5BhB,4BAA4B;EAAAiB,YAF3B;AAAM","names":["switchMap","ShortenUrlInterceptorService","constructor","linkService","intercept","req","next","shortCode","url","split","GetByCode","pipe","result","fullRequest","clone","originalUrl","handle","factory","providedIn"],"sourceRoot":"","sources":["C:\\Users\\MBARK.AzureAD\\source\\repos\\ShortifyApp\\source\\FrontEndService\\FrontEndService.WEB\\ClientApp\\src\\app\\HTTP-Interceptors\\ShortenUrlInterceptor.service.ts"],"sourcesContent":["import { HttpEvent, HttpHandler, HttpInterceptor, HttpRequest } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { LinkService } from '../Services/Link.service';\nimport { Observable, switchMap } from 'rxjs';\nimport { GetLinkByCodeQueryResult } from '../Queries/GetLinkByCodeQuery';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class ShortenUrlInterceptorService implements HttpInterceptor {\n  constructor(private linkService: LinkService) {}\n\n  intercept(\n    req: HttpRequest<any>,\n    next: HttpHandler\n  ): Observable<HttpEvent<any>> {\n    // Check if the request is containing a short code in the URL\n    const shortCode = req.url.split('/')[3];\n    if (shortCode) {\n      return this.linkService.GetByCode(shortCode).pipe(\n        switchMap((result: GetLinkByCodeQueryResult) => {\n          var fullRequest = req.clone({ url: result.originalUrl });\n          return next.handle(fullRequest);\n        })\n      );\n    } else {\n      return next.handle(req);\n    }\n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}